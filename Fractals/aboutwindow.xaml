<Window x:Class="Fractals.aboutwindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        mc:Ignorable="d"
        Title="" Height="300" Width="500"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" WindowStyle="None" BorderThickness="1" BorderBrush="#FF2196F3">
    <WindowChrome.WindowChrome>
        <WindowChrome
            ResizeBorderThickness="6"
            CaptionHeight="43"
            CornerRadius="2"
            GlassFrameThickness="0">
        </WindowChrome>
    </WindowChrome.WindowChrome>
    <Grid Margin="0,0,-1.4,-0.4">
        <materialDesign:ColorZone Mode="PrimaryMid" Padding="12" Margin="0">
            <DockPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Margin="16 0 0 0">About</TextBlock>
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button WindowChrome.IsHitTestVisibleInChrome="True" Style="{DynamicResource MaterialDesignToolButton}" HorizontalContentAlignment="Right" Height="25.6" Click="Close_OnClick" Margin="10,0,0,0">
                        <materialDesign:PackIcon Kind="Close" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" Margin="0" Foreground="White"/>
                    </Button>
                </StackPanel>
            </DockPanel>
        </materialDesign:ColorZone>
        <Grid Margin="10,43,10,10">
            <TextBlock TextWrapping="WrapWithOverflow" TextAlignment="Justify" LineHeight="18.667" Margin="0,14,0.4,0.6">
                This application draws the Mandelbrot Set with a normalized iteration count algorithm (continuous/smooth coloring).  I used the DirectX API to efficiently draw the Mandelbrot Set with HLSL or High Level Shading Language.  I then created a wrapper for the compiled *.ps* (pixel shader) file in a C# class which allowed me to use the rendered Mandelbrot Set as a local XAML Grid.Effect.  To bind the sliders to PixelShader registers I used the PixelShaderConstantCallback method to associate a dependecy property with the PixelShader's float constant register.
            </TextBlock>
        </Grid>
    </Grid>
</Window>
